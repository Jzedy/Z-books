package desighPatterns.createdType.ct04BuilderPattern;

/**
 *
 * 建造者模式
 *  优点：
 *      1）在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解
 * 耦，使得相同的创建过程可以创建不同的产品对象
 *      2）每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体
 * 建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。由于
 * 指挥者类针对抽象建造者编程，增加新的具体建造者无须修改原有类库的代码，系统扩展方
 * 便，符合“开闭原则”
 *      3）可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得
 * 创建过程更加清晰，也更方便使用程序来控制创建过程
 *  缺点：
 *      1）建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异
 * 性很大，例如很多组成部分都不相同，不适合使用建造者模式，因此其使用范围受到一定的
 * 限制
 *      2）如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致
 * 系统变得很庞大，增加系统的理解难度和运行成本
 *
 * @author Jzedy
 * @time 2019/4/9 22:00
 * @description
 */
public class Client {
    public static void main(String[] args) {
        TextMessage message = Message.TEXT().toUser("Jzedy").content("hello world").build();
        System.out.println(message);
    }
}
